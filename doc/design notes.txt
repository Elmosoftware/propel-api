Unused fields to be removed:
===============================
Script
--------
v	- isSystem
v	- readonly 

Workflow
-----------
v	- isPrivate

New Fields to be added:
============================

Script
--------
	- enabled = true
	
OFFLINE Indicators
=======================================

isNetworkOffline:
------------------

Subtitle: No network connection.
Message: 
	If !isAPIUnreachable
		Propel service is up and running, but you won't be able to reach any of your target servers.
	else
		Propel service is unreachable now.
	Please double check your network cable, or try to reconnect your Wi-Fi. 
	As soon this is fixed Propel will be available again. 

	HIDE BUTTON

isAPIUnreachable:
-----------------		

Subtitle: Propel service seems to be down.
Message: Maybe the only needed is to start the service!. Please enter "Services" in the windows search bar and open the services console. Then locate a service called "Propel" and start it. 
	You can also change the service startup type to automatic to avoid this to happen again.

	As soon you fix this please click on the retry button.

	SHOW BUTTON

Distribution
=================================

1st - install node-windows

npm install -g node-windows

2nd - Move to the propel-api dir and run
	npm link node-windows


Text Search
========================================

db.getCollection('XXXXX').createIndex( 
	{"name": "text", "description": "text"}, 
	{"weights": { name: 3, description:1 }} )

Using Natural to tokenize and stemming the search term:
var natural = require("natural")
natural.PorterStemmer.tokenizeAndStem("123 a b c is d calamatta e f")
//["123", "calamatta"] If no results are returned we have 2 options:
	1- Warn the user to refine the search
	2- pass the value between quotes to search it lterally


How to search:

db.getCollection('XXXXX').find(	{$text: {$search: "Here the tokenized and stemmed words separated by spaces"}}, 
		{score: {$meta: "textScore"}})
	.sort({score: {$meta: "textScore"}})

If theuser sent a quoted string:

like ""my quoted string""

1st we remove quotes: "my quoted string"
2nd search exact matches using: 

.find({$or: [
                { "field1": new RegExp("my quoted string", "gi")},
                { "field2": new RegExp("my quoted string", "gi")}
            ]})

Styling:
==========================
Background: #eef4f9
Complementary: #f9f2ee
Monochromatic: #aac7e0
Font color: #123441 or #003e52
link active: #00839b


RUN SCRPT/WORKFLOW - Arch design
==============================================
What to do when we receive a request to run a task or workflow?

1 - Retrieve the Workflow/Task

We will describe the steps for a workflow:
Para cada tarea del workflow, necesitamos determinar si tiene target servers
Si tiene: Por cada server pedimos al object pool una instancia del invocation service y lo ejecutamos. (En paralelo)
Si no tiene: Ejecutamos el script una sola sola vez, (pidiendo al object pool una instancia del invocation service)

Cuando la ejec en cada server o standalone termina, devolvemos la instancia al pool

SOLO CUANDO la ejec. en todos los servers termina, pasamos a la siguiente tarea. 

Orden modelos
============
Group
Target
Task
WorkflowStep
Workflow





Code decode base64 in Node.JS
============================================================
> var coded = Buffer.from("Texto de Prueba!!!", "utf8").toString("base64")
undefined
> coded
'VGV4dG8gZGUgUHJ1ZWJhISEh'
> Buffer.from(coded, "base64").toString("ascii")
'Texto de Prueba!!!'

TESTING TASK RUN
=================================


System and user scripts
Scripts that target servers and scripts that not.
Scripts read only and scripts that alter, (fictitiously), target state or data.
Scripts with and without parameters.
Scripts that execute fast and others that takes longer and even minutes.


Nomenclature for Test Scripts:

{SYS|USR}{NOTARGET|TARGET}{READONLY}{NOPARAMS}{SLOW|MEDIUM|FAST}.ps1

Variants:



SERVER GROUPS
---------------
Para los target servers: dar la posibilidad de crear Grupos de Servidores. Que puedan ser referenciados en lugar de los servidores directamente.
Por ejemplo si tenemos los siguientes servidores:
S1, S2, S3, S4, S5
Podemos crear los grupos Finance y RRHH de esta forma:

Finance: S1, S2
RRHH: S3, S4, S5

Luego estos grupos pueden usarse como targets.

=====================================================================================

Workflows
---------

Constituidos por pasos que son Job definitions
Los targets son definidos a nivel de Job, pero al crear un nuevo paso debe mantener los targets seleccionados en el paso anterior.
La ejecución del workflow será:
	- En paralelo en los distintos targets
	- En cada target los pasos se ejecutarán en forma secuencial.

Configuración/atributos a nivel de workflow: 
____________________________________________
-Nombre	
-Descripcion
-Compartido (indica si otros usuarios van a poder ejecutarlo)
-Pasos: Coleccion de Jobs con nombre

Configuración/atributos a nivel de paso:
_________________________________________
Que hacer si el paso falla? Opciones: Continuar con el siguiente o Abortar el workflow para ese target.

=======================================================================================
Search
--------
Agregar pagina para buscar, seleccionar y lanzar un Workflow. (desde el search box en el menu)
=======================================================================================
Scripts
--------

ABM de Scripts
	Details Tab:
		- Name (string)
		- Description (string)
		- Require Targets (boolean) Some scripts like the one consuming a Web Service or execute an LDAP query do not need to specify a target.
		- Category
		- Type
			There will be 2 types: 
				-SYSTEM
				-USER
			Type USER is the one created by the regular users. Type SYSTEM are internal scripts from Propel, that are used for internal operations, but they will be available to the users also so they can use them.
	examples of this type are a Ping script to verify target availability or a Script to wait certain time for time paced actions, (For eample if you create a workflow to put in rotation some servers, you maybe want to wait certain time till check a Load Balancer is picking the right ones).
		- Is modifying server State or Data?
	Code Tab:	
		- Code  (string)
		It must allow to drop a .ps1 file or to paste directly the code. Figure out if there is a tool or something that allows to color the text based on the 
	Parameters Tab:
		- Parameters (array)
		Parameters can be inferred. So, each time the script change we need to rerun the parameter detection and store the new values
		These are the parameter attributes:
		-Name -> (get-command .\testParams.ps1).ParameterSets.Parameters[].Name
		-Description -> (get-command .\testParams.ps1).ParameterSets.Parameters[].HelpMessage
		-NativeType -> (get-command .\testParams.ps1).ParameterSets.Parameters[].ParameterType
		-Type -> The javascript type the Powershell parameter is mapped
		-Position -> (get-command .\testParams.ps1).ParameterSets.Parameters[].Position
		-IsRequired -> (get-command .\testParams.ps1).ParameterSets.Parameters[].IsMandatory
		-ValidValues -> (get-command .\testParams.ps1).ParameterSets.Parameters[0].attributes.ValidValues[]
		-CanBeNull -> If (get-command .\testParams.ps1).ParameterSets.Parameters[0].attributes contains { TypeId : System.Management.Automation.ValidateNotNullAttribute }
		-CanBeEmpty -> If (get-command .\testParams.ps1).ParameterSets.Parameters[0].attributes contains { TypeId : System.Management.Automation.ValidateNotNullOrEmptyAttribute }

	
	Finish
		- All the details
ABM de Targets:


Target Attributes:
	- FQDName:	Fully Qualified domain Name that will be used on the invocations.
	https://support.microsoft.com/en-us/help/909264/naming-conventions-in-active-directory-for-computers-domains-sites-and
	Name restrictions:
		DNS names can contain only alphabetical characters (A-Z), numeric characters (0-9), the minus sign (-), and the period (.). Period characters are allowed only when they are used to delimit the components of domain style names.
		The first character must be alphabetical or numeric.
		The last character must not be a minus sign or a period.
	FriendlyName: A short and easy name to refer the server.
	Description: A brief description 
	Group: A name that group servers and later allow to be used instead of FQD or Friendly names to add a group of servers as targets for a Job or workflow and facilitate administration.
	Tags: Tags allow you to define specific server functions that make it suitable as destination of a specific script. e.g: IIS server, SQL Server Reporting, SQL Server DB Engine, SQL Server Analytics, 

-------------------------------------------------------------------------------------

Add the ability to save a Job as a workflow

======================================================================================
Inferring script parameters:
_______________________________

Casting in node-powershell: https://rannn505.gitbook.io/node-powershell/tips#cast-js-to-ps-data-types
How to infer the params: (get-command .\myscript.ps1).ParameterSets.Parameters | Format-List  
Powershell common data types (https://ss64.com/ps/syntax-datatypes.html)

Powershell Data Type						Javascript Data Type
--------------------------------------------------------------------------------------------------
 [string]    Fixed-length string of Unicode characters		String
 [char]      A Unicode 16-bit character				String
 [byte]      An 8-bit unsigned character			Number
 [int]       32-bit signed integer				Number
 [long]      64-bit signed integer				Number
 [bool]      Boolean True/False value				Boolean
 [decimal]   A 128-bit decimal value				Number
 [single]    Single-precision 32-bit floating point number	Number
 [double]    Double-precision 64-bit floating point number	Number
 [DateTime]  Date and Time					Date Object
 [array]     An array of values					Array Object
 [hashtable] Hashtable object					Object


Validation Attributes
-----------------------------------

ValidateCountAttribute	
Validates that the parameter argument count is in the specified range
Propel: NOT SUPPORTED, need to be validated inside the script.

ValidateDriveAttribute	
Validates that the path has an approved root drive
Propel: NOT SUPPORTED, no action wil be taken if this is present.It can be evaluating only when running on the remote target. 

ValidateLengthAttribute	
________________________
Validates that the length of each parameter argument's Length falls in the range specified by MinLength and MaxLength
Note: Cannot be applied to a parameter that is not a string or string[].

example: 
	[ValidateLength(2,10)]
Then: 
	(get-command .\testParams.ps1).ParameterSets.Parameters[0].attributes
Returns:
	MinLength : 2
	MaxLength : 10
	TypeId    : System.Management.Automation.ValidateLengthAttribute
Propel: NOT SUPPORTED, (for now), it must throw a runtime exception based on the configured values for the execution.

ValidateNotNullAttribute
________________________	
Validates that the parameters's argument is not null

example: [ValidateNotNull()]
Then: (get-command .\testParams.ps1).ParameterSets.Parameters[0].attributes
Returns:
	TypeId : System.Management.Automation.ValidateNotNullAttribute
Propel: SUPPORTED!, by the "canBeNull" property.

ValidateNotNullOrEmptyAttribute	
_______________________________
Validates that the parameters's argument is not null, is not an empty string, and is not an empty collection.

example: [ValidateNotNullOrEmpty()]
Then: (get-command .\testParams.ps1).ParameterSets.Parameters[0].attributes
Returns:
	TypeId : System.Management.Automation.ValidateNotNullOrEmptyAttribute
Propel: SUPPORTED! by the "canBeEmpty" property.

ValidateRangeAttribute	
________________________
Validates that each parameter argument falls in the range specified by MinRange and MaxRange.
Must be applied to a int or string parameter.

example: [ValidateRange(0,10)]
Then: (get-command .\testParams.ps1).ParameterSets.Parameters[0].attributes
Returns:
	MinRange : 0
	MaxRange : 10
	TypeId   : System.Management.Automation.ValidateRangeAttribute
Propel: NOT SUPPORTED, (for now), it must throw an exception based on the configured values for the execution.

ValidateSetAttribute
_____________________	
Validates that each parameter argument is present in a specified set

example: [ValidateSet('ValidValue1','ValidValue2')]
Then: (get-command .\testParams.ps1).ParameterSets.Parameters[0].attributes
Returns:
	IgnoreCase  : True
	ValidValues : {ValidValue1, ValidValue2}
	TypeId      : System.Management.Automation.ValidateSetAttribute
Propel: SUPPORTED! by providing the set of values in a dropdown.

-----------------------------------------------------------------------------------------------------------
Integration of all the solution files:
=========================================

Separate repositories:
------------------------

Propel
	propel-core
		.git
	propel-api
		.git
	propel-web
		.git

Mono repo:
----------------------

propel-api ->rename to propel
	.git
	core files here
propel-api
propel-web

=====================================================================================

Impersonate another user account when executing remote scripts
---------------------------------------------------------------

https://stackoverflow.com/questions/28989750/running-powershell-as-another-user-and-launching-a-script/34307483


$u = "Domain\User"
$p = "Password here"
$sp = ConvertTo-SecureString $p -AsPlainText -Force
$cred = New-Object System.Management.Automation.PSCredential $u, $sp

Start-Process Notepad.exe -Credential $cred

One line version
---------------------
$cred = New-Object System.Management.Automation.PSCredential "Domain\User", (ConvertTo-SecureString "Password here" -AsPlainText -Force)

Start-Process Notepad.exe -Credential $cred

------------------------------------------------------------

How to generate the ENCRYPTION_KEY in the env file:

Navigate to https://asecuritysite.com/encryption/keygen
Select the option AES 256 CBC
Enter a passphrase
The page will return something like this:

salt=C762955414E7C25E
key=30CB6CBC52E004DD2E756D5915F3A420E613EE7EBF7681F451E063ECA9154DD8
iv =505B362C922CB8A2B63B47451272DA9B

get the key and use it in the .env file

Validation: key must be always 64 bytes long.

==================================================================================
Propel Credentials:
-----------------------

Credentials {
	name:  {string max 25 , required, unique, FULL Text Search index},
	description: {string max 512, FULL Text Search index}
	type: {string, required, Can be "Generic" or "AWS"}
	secret: {string, required, encrypted}
	fields: [CredentialField]
}

secret attribute:
	Secret attribute content will be always a JSON string, and the schema depend of the attribute "type"

	For the type "Generic":
	{
		userName: {string max 255, required},
		domain: {string max 255},
		password: {string max 50, required}
	}

	For the type "AWS":
	{
		accessKey: {string max 20, required},
		secretKey: {string max 40, required}
	}

===================================================================================

Credentials Model:

CredentialSecret
{
	type: string;
	secret: string;
}

GenericCredential inherits CredentialSecret {
	userName
	domain
}

AWSCredential inherits CredentialSecret {
	accessKey
}

---------------------------------------------------------------------------------
2nd approach:

Credentialbase {
	name,
	description,
	fields,
	secret: any
}

GenericCredential inherits CredentialSecret {

	secret: {
		userName,
		domain
		password
	}
	
}

AWSCredential inherits CredentialSecret {
	secret: {
		accessKey
		secretKey
	}	
}

===============================================================
Next steps:

v - Commit Propel credentials changes.
v - Add "credentials" menu in Nav bar
v - Add Visual hints and additional information in the Credentials form.   
v - Work on Browse credentials
v - Modify Credentials component to redirect to the new browse when there is a CRYPTO_ERROR
v - Add icons in the menues of the navigation bar, (Browse and credentials).
v - In home page add counter for total credentials get also an icon representing all credentials 
  from font-awesome
v - Add a graph tp the hme page indcating some metrics, like usage in last month, most used workflows, etc...
v - Add a text or navigational help to indicate which is the current page.
v - Upgrade ALL, (Node, Mongo, angular, all dependencies, etc.)
  - Full regression test.
  - Update help.
=============================================================================

Propel Usage Statistics:
------------------------

UsageStats {
	totals: {
		executions: number -> Total amount of executions in the current period.
		workflows: number -> Total of Workflows defined.
		targets: number -> Total of Targets created.
		scripts: number -> Amount of script uploaded in Propel.
		credentials: number -> Total amount of Credentials Propel is keeping safe.
	},
	dailyExecutions: [
		{
			name: string
			series: [{
				name: date,
				value: number
			}]
		}
	]
	mostUsedWorkflows: [
		{
			_id: string,
			name: string,
			lastDate: date,
			value: number
		}
	]
	latestExecutions: [
		{
			_id: string,
			name: string,
			lastDate: date,
			value: number
		}
	]
	lastExecutionErrors: [
		{
			_id: string,
			name: string,
			lastDate: date,
			value: number
		}
	]
}

-------------------------------------------------------------
Next steps:
------------

v- Implement a route to retrieve the stats.
	If there is no stats
		return a message saying the stats are being refreshed.
	else
		return the current stats.
x- Persist The Stats (Not required, stats take less than a second to be 
recalculated, we will cache them in memory)
x- Implemet a batch process to update the stats if required and in fixed intervals."If required" 
means that we need to be able to define if we have stale stats. (Not required)
v-Work on state staleness: How to know when this are stale?


====================================================================================

Propel v2.1
__________________________________________________

User Login - Use cases:
=======================

CASE 1: Locked User -> The user should not login.
	secretId any value
	lastlogin any value
	mustReset any value
	lockedSince is not null

CASE 2: New user -> The user need to set his password on next login. 
	secretId is empty
	lastLogin is null
	mustReset is false
	lockedSince is null

CASE 3:Existent user -> The user will login as usual.
	secretId is NOT empty
	lastlogin is not null
	mustReset is false
	lockedSince is null


CASE 4: System Password reset -> An Admin reset another user password.
	secretId is NOT empty   (See waht to do if is empty)
	lastlogin any value
	mustReset is true
	lockedSince is null


TBD if to implement:

User Password reset -> The user reset his own password.
	secretId is NOT empty
	lastlogin any value
	mustReset is true
	lockedSince is null

Error codes

- Nouser was found
- User is locked
- Wrong password


security endpoints
GET  /security/?id   --> UserAccount
POST /security/login
POST /security/register -->
PUT /security/register
POST /security/lock
POST /security/unlock
POST /security/reset

===================================================================
AUTH GUARD

data: {
	title: "My Page"
	security : {
		restricted: {true | false}, //Indicates if non-authenticated users can access the page.
		adminOnly:  {true | false}, //Indicates ifonly Administrators can access.
	}
},

============================================================================
REFRESH TOKEN

When login happens:
	- We create a RT (refresh token) and stored it in the DB
	- Return the RT and an AT (access token) to the client.
	- The client stores it in local storage.

During any request:
	- The client send the AT
	- If the AT is expired: The client sends a RT to /api/security/refresh. If the 
	client has no RT, the user must login again.
	- The server receives the RT. If doesn't exist or is already expired in API DB another 401 with 
	Token expired error will be sent to client and the user must login again.
	If the RT exists and is not expired, a new AT will be sent to the client.
	- With the new AT the client must retry the original request.

When the user log off:
	-Remove the AT y RT
	-Call the API to remove the RT from the DB.

DB changes
-----------

New "Sessions" collection must expire at 30 days age.

Session: {
	_Id: ObjectId/String --> This will be the refresh token
	user: ObjectId/String --> User Id
	sessionStartsAt: Date --> Session starts timestamp (used for the expiration)
}
	
---------------------------------------------------------------------------
Refactor of conversion of valus from Powershell to JS and viceversa:
___________________________________________________________________


const PSConversion = {
    [`${PSType.Object}`]: {
		type: JSType.Object,
		converter: new JavascriptObjectConverter()
 }

const JSConversion = {
    [`${JSType.Object}`]: {
		type: PSType.Object,
		converter: new PowerShellObjectConverter()
 }

 const TypeConversion: {
	JavascriptToPowerShell: JSConversion
	PowerShellToJavascript: PSConversion
 }




interface ValueConverter {
	convert(value: any): any 
}

class PowerShellObjectConverter implements ValueConverter{
	convert(value: any): any {
		//here how to convert from Powerhsell Object to Javascript Object.
	}
}

class JavascriptObjectConverter implements ValueConverter{
	convert(value: any): any {
		//here how to convert from Powerhsell Object to Javascript Object.
	}
}

class ParameterValueConverter {
	toPowerShell(pv: ParameterValue): ParameterValue {
		let newValue = TypeConversion.JavascriptToPowerShell[pv.nativeType].convert(pv.value)
		pv.value = newValue;
		return pv;
	}

	toJavascript(pv: ParameterValue): ParameterValue {
		let psType: PSType = TypeConversion.JavascriptToPowerShell[pv.nativeType].type
		let newValue = TypeConversion.PowerShellToJavascript[psType].convert(pv.value)
		pv.value = newValue;
		return pv;
	}
}





